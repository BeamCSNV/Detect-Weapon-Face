import cv2
import dlib
import requests
import numpy as np
from ultralytics import YOLO

LINE_NOTIFY_TOKEN = "6n6NUX9mdUjHysH3IqGEdyuN5Wmh6BPZwaZNlzuJr44"

def send_line_notify(message, image_path=None, image_label=None):
    url = "https://notify-api.line.me/api/notify"
    headers = {"Authorization": "Bearer " + LINE_NOTIFY_TOKEN}
    payload = {"message": message}

    if image_path:
        image_data = open(image_path, "rb").read()
        files = {"imageFile": image_data}
        response = requests.post(url, headers=headers, data=payload, files=files)
    else:
        response = requests.post(url, headers=headers, data=payload)

    return response

weapon_model = YOLO("best_lastest.pt")
face_detector = dlib.get_frontal_face_detector()
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()

    if ret:
        weapon_results = weapon_model.track(frame, conf=0.5)
        faces = face_detector(frame)

        if faces and not weapon_results:
            # ถ้าตรวจเจอแค่ใบหน้าอย่างเดียวหรือไม่ตรวจเจออะไรเลย
            continue
        elif faces and len(weapon_results) == 1:
            # ถ้าตรวจเจออาวุธและใบหน้าพร้อมกัน
            weapon_image_array = weapon_results[0].orig_img
            weapon_frame = weapon_results[0].plot()
            face_image = frame[faces[0].top():faces[0].top() + faces[0].height(),
                            faces[0].left():faces[0].left() + faces[0].width()]
            face_image_resized = cv2.resize(face_image, (weapon_frame.shape[1], weapon_frame.shape[0]),
                                            interpolation=cv2.INTER_AREA)
            weapon_and_face_image = np.concatenate((weapon_frame, face_image_resized), axis=1)

            # วาดกรอบตรวจจับใบหน้า
            x1_face, y1_face, x2_face, y2_face = faces[0].left(), faces[0].top(), faces[0].right(), faces[0].bottom()
            cv2.rectangle(weapon_and_face_image, (x1_face, y1_face), (x2_face, y2_face), (0, 0, 255), 2)

            # วาดกรอบตรวจจับอาวุธ
            x1_weapon, y1_weapon, x2_weapon, y2_weapon = 0, 0, weapon_frame.shape[1], weapon_frame.shape[0]
            cv2.rectangle(weapon_and_face_image, (x1_weapon, y1_weapon), (x2_weapon, y2_weapon), (0, 0, 255), 2)

            # ส่งข้อความแจ้งเตือนไปยังไลน์พร้อมรูปภาพและวิดีโอ
            cv2.imwrite("weapon_and_face.jpg", weapon_and_face_image)
            video_writer = cv2.VideoWriter("weapon_and_face.avi", cv2.VideoWriter_fourcc(*"XVID"), 10.0,
                                          (weapon_and_face_image.shape[1], weapon_and_face_image.shape[0]))
            video_writer.write(weapon_and_face_image)
            video_writer.release()

            response = send_line_notify("พบอาวุธและใบหน้าผู้ร้าย", "weapon_and_face.jpg", "อาวุธและใบหน้า")
            print(response.text)
            
        cv2.imshow("Detection Result", weapon_and_face_image)

        if cv2.waitKey(25) & 0xFF == ord("q"):
            break

cap.release()
cv2.destroyAllWindows()

----------------------------------------------------------------------------------------------------------------------------------

import cv2
import dlib
import requests
import numpy as np
from ultralytics import YOLO
import os
import csv

LINE_NOTIFY_TOKEN = "6n6NUX9mdUjHysH3IqGEdyuN5Wmh6BPZwaZNlzuJr44"

def send_line_notify(message, image_path=None, image_label=None):
    url = "https://notify-api.line.me/api/notify"
    headers = {"Authorization": "Bearer " + LINE_NOTIFY_TOKEN}
    payload = {"message": message}

    if image_path:
        image_data = open(image_path, "rb").read()
        files = {"imageFile": image_data}
        response = requests.post(url, headers=headers, data=payload, files=files)
    else:
        response = requests.post(url, headers=headers, data=payload)

    return response

# โมเดล YOLO สำหรับตรวจจับอาวุธ
weapon_model = YOLO("best_lastest.pt")

# ตัวตรวจจับใบหน้าจาก Dlib
face_detector = dlib.get_frontal_face_detector()

# เปิดการใช้งานกล้อง
cap = cv2.VideoCapture(0)

# สร้างโฟลเดอร์ "new_faces" เพื่อเก็บรูปใบหน้าใหม่
new_faces_folder = "new_faces"
if not os.path.exists(new_faces_folder):
    os.makedirs(new_faces_folder)

known_faces_csv = "known_faces.csv"
known_faces = set()

# ตรวจสอบไฟล์ CSV และนำข้อมูลมาใส่ในเซต
if os.path.exists(known_faces_csv):
    with open(known_faces_csv, newline='') as csvfile:
        reader = csv.reader(csvfile)
        known_faces = set(row[0] for row in reader)

while True:
    ret, frame = cap.read()

    if ret:
        # ใช้ YOLO เพื่อตรวจจับอาวุธ
        weapon_results = weapon_model.track(frame, conf=0.5)
        faces = face_detector(frame)

        # ตรวจสอบว่ามีใบหน้าหรือไม่
        if faces:
            # ตรวจสอบแต่ละใบหน้า
            for face in faces:
                # ตรวจสอบว่าใบหน้านี้เคยถูกแจ้งเตือนและเซฟรูปไว้แล้วหรือไม่
                face_image = frame[face.top():face.top() + face.height(), face.left():face.left() + face.width()]
                face_id = hash(face_image.tobytes())
                
                if face_id not in known_faces:
                    # ถ้าใบหน้านี้เป็นใหม่
                    known_faces.add(face_id)

                    # บันทึกรูปใบหน้าใหม่
                    face_filename = os.path.join(new_faces_folder, f"{face_id}.jpg")
                    cv2.imwrite(face_filename, face_image)

                    # ตั้งชื่อไฟล์สำหรับแจ้งเตือน
                    notification_filename = face_filename

                    # ส่งแจ้งเตือนไปยังไลน์พร้อมรูปภาพใบหน้าใหม่
                    response = send_line_notify("พบใบหน้าใหม่", notification_filename, "ใบหน้าใหม่")
                    print(response.text)

        # ตรวจสอบว่ามีการตรวจจับอาวุธหรือไม่
        if faces and not weapon_results:
            continue
        elif faces and len(weapon_results) == 1:
            # ถ้าตรวจเจออาวุธและใบหน้าพร้อมกัน
            weapon_image_array = weapon_results[0].orig_img
            weapon_frame = weapon_results[0].plot()
            face_image = frame[faces[0].top():faces[0].top() + faces[0].height(),
                            faces[0].left():faces[0].left() + faces[0].width()]
            face_image_resized = cv2.resize(face_image, (weapon_frame.shape[1], weapon_frame.shape[0]),
                                            interpolation=cv2.INTER_AREA)
            weapon_and_face_image = np.concatenate((weapon_frame, face_image_resized), axis=1)

            # วาดกรอบตรวจจับใบหน้า
            x1_face, y1_face, x2_face, y2_face = faces[0].left(), faces[0].top(), faces[0].right(), faces[0].bottom()
            cv2.rectangle(weapon_and_face_image, (x1_face, y1_face), (x2_face, y2_face), (0, 0, 255), 2)

            # วาดกรอบตรวจจับอาวุธ
            x1_weapon, y1_weapon, x2_weapon, y2_weapon = 0, 0, weapon_frame.shape[1], weapon_frame.shape[0]
            cv2.rectangle(weapon_and_face_image, (x1_weapon, y1_weapon), (x2_weapon, y2_weapon), (0, 0, 255), 2)

            # ส่งข้อความแจ้งเตือนไปยังไลน์พร้อมรูปภาพและวิดีโอ
            #cv2.imwrite("weapon_and_face.jpg", weapon_and_face_image)
            #video_writer = cv2.VideoWriter("weapon_and_face.avi", cv2.VideoWriter_fourcc(*"XVID"), 10.0,
                                          #(weapon_and_face_image.shape[1], weapon_and_face_image.shape[0]))
            #video_writer.write(weapon_and_face_image)
            #video_writer.release()

            #response = send_line_notify("พบอาวุธและใบหน้าผู้ร้าย", "weapon_and_face.jpg", "อาวุธและใบหน้า")
            #print(response.text)
            
        # แสดงผลลัพธ์การตรวจจับ
        cv2.imshow("Detection Result", weapon_and_face_image)

        # กด 'q' เพื่อออกจากโปรแกรม
        if cv2.waitKey(25) & 0xFF == ord("q"):
            break

# บันทึกข้อมูลใบหน้าที่เคยแจ้งเตือนและเซฟรูปไว้ลงในไฟล์ CSV
with open(known_faces_csv, 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    for face_id in known_faces:
        writer.writerow([face_id])

# ปิดการใช้งานกล้องและปิดหน้าต่างทั้งหมด
cap.release()
cv2.destroyAllWindows()

--------------------------------------------------------------------

import cv2
import dlib
import requests
import numpy as np
from ultralytics import YOLO
import os

LINE_NOTIFY_TOKEN = "6n6NUX9mdUjHysH3IqGEdyuN5Wmh6BPZwaZNlzuJr44"

def send_line_notify(message, image_path=None, image_label=None):
    url = "https://notify-api.line.me/api/notify"
    headers = {"Authorization": "Bearer " + LINE_NOTIFY_TOKEN}
    payload = {"message": message}

    if image_path:
        image_data = open(image_path, "rb").read()
        files = {"imageFile": image_data}
        response = requests.post(url, headers=headers, data=payload, files=files)
    else:
        response = requests.post(url, headers=headers, data=payload)

    return response

# โมเดล YOLO สำหรับตรวจจับอาวุธ
weapon_model = YOLO("best_lastest.pt")

# ตัวตรวจจับใบหน้าจาก Dlib
face_detector = dlib.get_frontal_face_detector()

# เปิดการใช้งานกล้อง
cap = cv2.VideoCapture(0)

# ระบุ path ที่ต้องการเซฟรูปภาพ
dataset_path = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/dataset"

# ตัวแปร global เพื่อเก็บข้อมูล ID ของใบหน้าที่ได้รับการแจ้งเตือน
detected_face_ids = set()

while True:
    ret, frame = cap.read()

    if ret:
        # ใช้ YOLO เพื่อตรวจจับอาวุธ
        weapon_results = weapon_model.track(frame, conf=0.5)
        faces = face_detector(frame)

        # ตรวจสอบว่ามีใบหน้าหรือไม่
        if faces:
            # ตรวจสอบแต่ละใบหน้า
            for face in faces:
                # ตรวจสอบว่าใบหน้านี้เคยถูกแจ้งเตือนและเซฟรูปไว้แล้วหรือไม่
                face_image = frame[face.top():face.top() + face.height(), face.left():face.left() + face.width()]
                face_id = hash(face_image.tobytes())

                # ตรวจสอบว่า ID ของใบหน้านี้เคยได้รับการแจ้งเตือนหรือไม่
                if face_id not in detected_face_ids:
                    detected_face_ids.add(face_id)

                    # ถ้าโฟลเดอร์ใหม่ถูกสร้างขึ้นเพื่อใบหน้านี้เท่านั้น
                    # บันทึกรูปใบหน้าใหม่
                    face_folder_path = os.path.join(dataset_path, str(face_id))
                    os.makedirs(face_folder_path, exist_ok=True)

                    face_filename = os.path.join(face_folder_path, f"{face_id}.jpg")
                    cv2.imwrite(face_filename, face_image)

                    # ตั้งชื่อไฟล์สำหรับแจ้งเตือน
                    notification_filename = face_filename

                    # ส่งแจ้งเตือนไปยังไลน์พร้อมรูปภาพใบหน้าใหม่
                    response = send_line_notify("พบใบหน้าใหม่", notification_filename, "ใบหน้าใหม่")
                    print(response.text)

        # ตรวจสอบว่ามีการตรวจจับอาวุธหรือไม่
        if faces and not weapon_results:
            continue
        elif faces and len(weapon_results) == 1:
            # ถ้าตรวจเจออาวุธและใบหน้าพร้อมกัน
            weapon_image_array = weapon_results[0].orig_img
            weapon_frame = weapon_results[0].plot()
            face_image = frame[faces[0].top():faces[0].top() + faces[0].height(),
                            faces[0].left():faces[0].left() + faces[0].width()]
            face_image_resized = cv2.resize(face_image, (weapon_frame.shape[1], weapon_frame.shape[0]),
                                            interpolation=cv2.INTER_AREA)
            weapon_and_face_image = np.concatenate((weapon_frame, face_image_resized), axis=1)

            # วาดกรอบตรวจจับใบหน้า
            x1_face, y1_face, x2_face, y2_face = faces[0].left(), faces[0].top(), faces[0].right(), faces[0].bottom()
            cv2.rectangle(weapon_and_face_image, (x1_face, y1_face), (x2_face, y2_face), (0, 0, 255), 2)

            # วาดกรอบตรวจจับอาวุธ
            x1_weapon, y1_weapon, x2_weapon, y2_weapon = 0, 0, weapon_frame.shape[1], weapon_frame.shape[0]
            cv2.rectangle(weapon_and_face_image, (x1_weapon, y1_weapon), (x2_weapon, y2_weapon), (0, 0, 255), 2)

            # ส่งข้อความแจ้งเตือนไปยังไลน์พร้อมรูปภาพและวิดีโอ
            cv2.imwrite("weapon_and_face.jpg", weapon_and_face_image)
            video_writer = cv2.VideoWriter("weapon_and_face.avi", cv2.VideoWriter_fourcc(*"XVID"), 10.0,
                                           (weapon_and_face_image.shape[1], weapon_and_face_image.shape[0]))
            video_writer.write(weapon_and_face_image)
            video_writer.release()

            response = send_line_notify("พบอาวุธและใบหน้าผู้ร้าย", "weapon_and_face.jpg", "อาวุธและใบหน้า")
            print(response.text)

            # แสดงผลลัพธ์การตรวจจับ
            cv2.imshow("Detection Result", weapon_and_face_image)

        # กด 'q' เพื่อออกจากโปรแกรม
        if cv2.waitKey(25) & 0xFF == ord("q"):
            break

# ปิดการใช้งานกล้องและปิดหน้าต่างทั้งหมด
cap.release()
cv2.destroyAllWindows()


------------------------------------ รันไฟล์ encodings.Pickle ไม่เซฟรูป -----------------------------------------

from imutils.video import VideoStream
from imutils.video import FPS
import face_recognition
import imutils
import pickle
import time
import cv2
import random

# โหลด face encodings และตัวตรวจหน้า
encodingsP = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/encodings.pickle"
print("[INFO] กำลังโหลด encodings + ตัวตรวจหน้า...")
data = pickle.loads(open(encodingsP, "rb").read())

# กำหนดค่าเริ่มต้นให้กับ currentname
currentname = "ไม่รู้จัก"

# เริ่มต้น video stream และรอให้มันอุ่นขึ้น
vs = VideoStream(src=0, framerate=10).start()
time.sleep(2.0)

# เริ่มต้น FPS counter
fps = FPS().start()

while True:
    # อ่านเฟรมจาก video stream และปรับขนาด
    frame = vs.read()
    frame = imutils.resize(frame, width=500)

    # ตรวจหาตำแหน่งและ encodings ของใบหน้า
    boxes = face_recognition.face_locations(frame)
    encodings = face_recognition.face_encodings(frame, boxes)
    names = []

    for encoding in encodings:
        # เปรียบเทียบ face encodings
        matches = face_recognition.compare_faces(data["encodings"], encoding)
        name = "ไม่รู้จัก"

        if True in matches:
            # ระบุบุคคลที่มีการตรงคู่มากที่สุด
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}
            
            for i in matchedIdxs:
                name = data["names"][i]
                counts[name] = counts.get(name, 0) + 1
            
            name = max(counts, key=counts.get)

            # พิมพ์ชื่อถ้าต่างจากชื่อปัจจุบัน
            if currentname != name:
                currentname = name
                print(currentname)
        else:
            # กำหนดชื่อแบบสุ่มหากไม่พบการตรงคู่
            num = random.random()
            data["names"].append(str(num))
            data["encodings"].append(encoding)
            print(data["names"])

            # อัปเดตไฟล์ pickle ด้วยข้อมูลใหม่
            with open("encodings.pickle", "wb") as f:
                f.write(pickle.dumps(data))

        names.append(name)

    # วาดสี่เหลี่ยมและชื่อลงบนเฟรม
    for ((top, right, bottom, left), name) in zip(boxes, names):
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 225), 2)
        y = top - 15 if top - 15 > 15 else top + 15
        cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX, .8, (0, 255, 255), 2)

    # แสดงเฟรม
    cv2.imshow("การระบุใบหน้ากำลังทำงาน", frame)

    # ตรวจสอบปุ่ม 'q' เพื่อออกจากลูป
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

    # อัปเดต FPS counter
    fps.update()

# หยุด video stream และ FPS counter
fps.stop()
print("[INFO] เวลาที่ใช้: {:.2f}".format(fps.elapsed()))
print("[INFO] ประมาณ FPS: {:.2f}".format(fps.fps()))

# ปิดหน้าต่างทั้งหมด
cv2.destroyAllWindows()
vs.stop()

------------------------------------ รันไฟล์ encodings.pickle เซฟรูปใบหน้าใหม่พร้อมกับจดจำ -----------------------------------------

import os
import cv2
import imutils
from imutils.video import VideoStream
from imutils.video import FPS
import face_recognition
import pickle
import time
import random

currentname = "ไม่รู้จัก"

# โหลด face encodings และตัวตรวจหน้า
encodingsP = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/encodings.pickle"
print("[INFO] กำลังโหลด encodings + ตัวตรวจหน้า...")
data = pickle.loads(open(encodingsP, "rb").read())

# กำหนดที่เก็บ dataset
dataset_path = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/dataset"
if not os.path.exists(dataset_path):
    os.makedirs(dataset_path)  # สร้างโฟลเดอร์เก็บรูปใบหน้าใหม่

# เริ่มต้น video stream และรอให้มันอุ่นขึ้น
vs = VideoStream(src=0, framerate=10).start()
time.sleep(2.0)

# เริ่มต้น FPS counter
fps = FPS().start()

while True:
    # อ่านเฟรมจาก video stream และปรับขนาด
    frame = vs.read()
    frame = imutils.resize(frame, width=500)

    # ตรวจหาตำแหน่งและ encodings ของใบหน้า
    boxes = face_recognition.face_locations(frame)
    encodings = face_recognition.face_encodings(frame, boxes)
    names = []

    for encoding in encodings:
        # เปรียบเทียบ face encodings
        matches = face_recognition.compare_faces(data["encodings"], encoding)
        name = "ไม่รู้จัก"

        if True in matches:
            # ระบุบุคคลที่มีการตรงคู่มากที่สุด
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}

            for i in matchedIdxs:
                name = data["names"][i]
                counts[name] = counts.get(name, 0) + 1

            name = max(counts, key=counts.get)

            # พิมพ์ชื่อถ้าต่างจากชื่อปัจจุบัน
            if currentname != name:
                currentname = name
                print(currentname)
        else:
            # เซฟรูปใบหน้าใน dataset และทำการเทรนใหม่เฉพาะใบหน้านี้
            num = random.random()
            data["names"].append(str(num))
            data["encodings"].append(encoding)
            print(data["names"])

            face_id = len(os.listdir(dataset_path)) + 1
            face_folder_path = os.path.join(dataset_path, f"ID{face_id:02d}")

            if not os.path.exists(face_folder_path):
                os.makedirs(face_folder_path)

            face_filename = os.path.join(face_folder_path, f"{face_id:02d}.jpg")
            cv2.imwrite(face_filename, frame[boxes[0][0]:boxes[0][2], boxes[0][3]:boxes[0][1]])

            # ทำการเทรนข้อมูลใหม่เฉพาะใบหน้านี้
            train_data = {"encodings": [encoding], "names": [str(num)]}
            with open(encodingsP, "wb") as f:
                f.write(pickle.dumps(train_data))

        names.append(name)

    # วาดสี่เหลี่ยมและชื่อลงบนเฟรม
    for ((top, right, bottom, left), name) in zip(boxes, names):
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 225), 2)
        y = top - 15 if top - 15 > 15 else top + 15
        cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX, .8, (0, 255, 255), 2)

    # แสดงเฟรม
    cv2.imshow("การระบุใบหน้ากำลังทำงาน", frame)

    # ตรวจสอบปุ่ม 'q' เพื่อออกจากลูป
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

    # อัปเดต FPS counter
    fps.update()

# หยุด video stream และ FPS counter
fps.stop()
print("[INFO] เวลาที่ใช้: {:.2f}".format(fps.elapsed()))
print("[INFO] ประมาณ FPS: {:.2f}".format(fps.fps()))

# ปิดหน้าต่างทั้งหมด
cv2.destroyAllWindows()
vs.stop()

------------------------------------ รันไฟล์ encodings.pickle เซฟรูปใบหน้าใหม่พร้อมกับจดจำและแจ้งเตือนเวลาพบใบหน้าพร้อมกับรุปภาพ ต้องแก้ไข -----------------------------------------

import os
import cv2
import imutils
from imutils.video import VideoStream
from imutils.video import FPS
import face_recognition
import pickle
import time
import random
import requests

currentname = "ไม่รู้จัก"  # กำหนดค่าเริ่มต้นให้กับ currentname

def send_line_notify(message, image_path=None):
    url = "https://notify-api.line.me/api/notify"
    token = "6n6NUX9mdUjHysH3IqGEdyuN5Wmh6BPZwaZNlzuJr44"

    headers = {
        "Authorization": f"Bearer {token}"
    }

    payload = {
        "message": message
    }

    if image_path:
        files = {"imageFile": open(image_path, "rb")}
        response = requests.post(url, headers=headers, params=payload, files=files)
    else:
        response = requests.post(url, headers=headers, params=payload)

    if response.status_code != 200:
        print(f"Error sending Line Notify: {response.text}")

# โหลด face encodings และตัวตรวจหน้า
encodingsP = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/encodings.pickle"
print("[INFO] กำลังโหลด encodings + ตัวตรวจหน้า...")
data = pickle.loads(open(encodingsP, "rb").read())

# กำหนดที่เก็บ dataset
dataset_path = "C:/Users/HP/Desktop/Yolov8 Detect Face&Weapon/Example Pickle/dataset"
if not os.path.exists(dataset_path):
    os.makedirs(dataset_path)  # สร้างโฟลเดอร์เก็บรูปใบหน้าใหม่

# เริ่มต้น video stream และรอให้มันอุ่นขึ้น
vs = VideoStream(src=0, framerate=10).start()
time.sleep(2.0)

# เริ่มต้น FPS counter
fps = FPS().start()

while True:
    # อ่านเฟรมจาก video stream และปรับขนาด
    frame = vs.read()
    frame = imutils.resize(frame, width=500)

    # ตรวจหาตำแหน่งและ encodings ของใบหน้า
    boxes = face_recognition.face_locations(frame)
    encodings = face_recognition.face_encodings(frame, boxes)
    names = []

    for encoding in encodings:
        # เปรียบเทียบ face encodings
        matches = face_recognition.compare_faces(data["encodings"], encoding)
        name = "ไม่รู้จัก"

        if True in matches:
            # ระบุบุคคลที่มีการตรงคู่มากที่สุด
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}

            for i in matchedIdxs:
                name = data["names"][i]
                counts[name] = counts.get(name, 0) + 1

            name = max(counts, key=counts.get)

            # พิมพ์ชื่อถ้าต่างจากชื่อปัจจุบัน
            if currentname != name:
                currentname = name
                print(currentname)
        else:
            # เซฟรูปใบหน้าใน dataset และทำการเทรนใหม่เฉพาะใบหน้านี้
            if currentname == "ไม่รู้จัก":
                num = random.random()
                data["names"].append(str(num))
                data["encodings"].append(encoding)
                print(data["names"])

                face_id = len(os.listdir(dataset_path)) + 1
                face_folder_path = os.path.join(dataset_path, f"ID{face_id:02d}")

                if not os.path.exists(face_folder_path):
                    os.makedirs(face_folder_path)

                face_filename = os.path.join(face_folder_path, f"{face_id:02d}.jpg")
                cv2.imwrite(face_filename, frame[boxes[0][0]:boxes[0][2], boxes[0][3]:boxes[0][1]])

                # ทำการเทรนข้อมูลใหม่เฉพาะใบหน้านี้
                train_data = {"encodings": [encoding], "names": [str(num)]}
                with open(encodingsP, "wb") as f:
                    f.write(pickle.dumps(train_data))

                # ส่งข้อมูล Line Notify
                send_line_notify("พบใบหน้าใหม่", image_path=face_filename)

        names.append(name)

    # วาดสี่เหลี่ยมและชื่อลงบนเฟรม
    for ((top, right, bottom, left), name) in zip(boxes, names):
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 225), 2)
        y = top - 15 if top - 15 > 15 else top + 15
        cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX, .8, (0, 255, 255), 2)

    # แสดงเฟรม
    cv2.imshow("การระบุใบหน้ากำลังทำงาน", frame)

    # ตรวจสอบปุ่ม 'q' เพื่อออกจากลูป
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

    # อัปเดต FPS counter
    fps.update()

# หยุด video stream และ FPS counter
fps.stop()
print("[INFO] เวลาที่ใช้: {:.2f}".format(fps.elapsed()))
print("[INFO] ประมาณ FPS: {:.2f}".format(fps.fps()))

# ปิดหน้าต่างทั้งหมด
cv2.destroyAllWindows()
vs.stop()
